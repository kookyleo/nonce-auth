name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # 首先运行测试确保代码质量
  test:
    name: Test before release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run doc tests
      run: cargo test --doc

  # 发布到 crates.io
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Verify tag matches Cargo.toml version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Tag version: $TAG_VERSION"
        echo "Cargo.toml version: $CARGO_VERSION"
        if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
          echo "Error: Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
          exit 1
        fi
    
    - name: Build package
      run: cargo build --release
    
    - name: Package
      run: cargo package
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  # 创建 GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, publish]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get tag
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
 
    - name: Generate changelog
      id: changelog
      run: |
        # Get the current and previous tags
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        echo "Current tag: $CURRENT_TAG"
    
        ALL_TAGS=$(git tag -l | sort -V)
        echo "All tags: $ALL_TAGS"
    
        PREV_TAG=$(echo "$ALL_TAGS" | grep -B1 "^$CURRENT_TAG$" | head -1)
        echo "Previous tag: $PREV_TAG"
    
        # Generate changelog
        if [ -n "$PREV_TAG" ] && [ "$PREV_TAG" != "$CURRENT_TAG" ]; then
          echo "## Changes since $PREV_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" --max-count=10 >> CHANGELOG.md
        fi
    
        # Safely output changelog to GitHub Actions
        echo "changelog<<EOF" >> $GITHUB_ENV
        cat CHANGELOG.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body: |
          # Nonce Auth ${{ steps.tag.outputs.tag }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          Add this to your `Cargo.toml`:
          
          ```toml
          [dependencies]
          nonce-auth = "${{ steps.tag.outputs.tag }}"
          ```
          
          ## Documentation
          
          - [API Documentation](https://docs.rs/nonce-auth/${{ steps.tag.outputs.tag }})
          - [Crates.io](https://crates.io/crates/nonce-auth)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 